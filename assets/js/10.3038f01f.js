(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{363:function(a,t,r){"use strict";r.r(t);var e=r(43),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[a._v("#")]),a._v(" js")]),a._v(" "),r("h2",{attrs:{id:"_1-如何理解-js-中的this关键字？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何理解-js-中的this关键字？"}},[a._v("#")]),a._v(" 1.如何理解 JS 中的this关键字？")]),a._v(" "),r("p",[a._v("this表示当前对象，this的指向是根据调用的上下文来决定的，默认指向window对象。"),r("br"),a._v("\n全局环境：全局环境就是在里面，这里的this始终指向的是window对象。"),r("br"),a._v("\n局部环境："),r("br"),a._v("\n1.在全局作用域下直接调用函数，this指向window。"),r("br"),a._v("\n2.对象函数调用，哪个对象调用就指向哪个对象。"),r("br"),a._v("\n3.使用 new 实例化对象，在构造函数中的this指向实例化对象。"),r("br"),a._v("\n4.使用call或apply改变this的指向。")]),a._v(" "),r("h2",{attrs:{id:"_2-javascript-中的作用域（scope）是指什么？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-javascript-中的作用域（scope）是指什么？"}},[a._v("#")]),a._v(" 2. JavaScript 中的作用域（scope）是指什么？")]),a._v(" "),r("p",[a._v("在 JavaScript 中，每个函数都有自己的作用域。作用域基本上是变量以及如何通过名称访问这些变量的规则的集合。只有函数中的代码才能访问函数作用域内的变量。")]),a._v(" "),r("p",[a._v("同一个作用域中的变量名必须是唯一的。一个作用域可以嵌套在另一个作用域内。如果一个作用域嵌套在另一个作用域内，最内部作用域内的代码可以访问另一个作用域的变量。")]),a._v(" "),r("h2",{attrs:{id:"_3-什么是闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是闭包"}},[a._v("#")]),a._v(" 3.什么是闭包")]),a._v(" "),r("p",[a._v("函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。----MDN")]),a._v(" "),r("p",[a._v("个人通俗说法\n闭包就是能够读取其他函数内部变量的函数。\n由于在javascript中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成“定义在一个函数内部的函数“。\n所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。")]),a._v(" "),r("h2",{attrs:{id:"_4-解释-javascript-中的相等性。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-解释-javascript-中的相等性。"}},[a._v("#")]),a._v(" 4. 解释 JavaScript 中的相等性。")]),a._v(" "),r("p",[a._v("JavaScript 中有严格比较和类型转换比较：")]),a._v(" "),r("p",[a._v("严格比较（例如 ===）在不允许强制转型的情况下检查两个值是否相等；"),r("br"),a._v("\n抽象比较（例如 ==）会自动转换类型之后检查两个值是否相等。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v('var a = "42";\nvar b = 42;\na == b; // true\na === b; // false\n')])])]),r("h2",{attrs:{id:"_5-解释一下变量的提升"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-解释一下变量的提升"}},[a._v("#")]),a._v(" 5. 解释一下变量的提升")]),a._v(" "),r("p",[a._v("变量的提升是JavaScript的默认行为，这意味着将所有变量声明移动到当前作用域的顶部，并且可以在声明之前使用变量。初始化不会被提升，提升仅作用于变量的声明。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("var x = 1\nconsole.log(x + '——' + y) // 1——undefined\nvar y = 2\n")])])]),r("h2",{attrs:{id:"_6-如何理解事件委托"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-如何理解事件委托"}},[a._v("#")]),a._v(" 6.如何理解事件委托")]),a._v(" "),r("p",[a._v("在DOM树上绑定事件监听器并使用JS事件处理程序是处理客户端事件响应的典型方法。 从理论上讲，我们可以将监听器附加到HTML中的任何DOM元素，但由于事件委派，这样做是浪费而且没必要的。")]),a._v(" "),r("ul",[r("li",[a._v("什么是事件委托？"),r("br"),a._v("\n这是一种让父元素上的事件监听器也影响子元素的技巧。 通常，事件传播（捕获和冒泡）允许我们实现事件委托。 冒泡意味着当触发子元素（目标）时，也可以逐层触发该子元素的父元素，直到它碰到DOM绑定的原始监听器（当前目标）。 捕获属性将事件阶段转换为捕获阶段，让事件下移到元素; 因此，触发方向与冒泡阶段相反。 捕获的默认值为false。")])]),a._v(" "),r("h2",{attrs:{id:"_7-解释一下严格模式-strict-mode"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-解释一下严格模式-strict-mode"}},[a._v("#")]),a._v(" 7.解释一下严格模式(strict mode)")]),a._v(" "),r("p",[a._v("严格模式用于标准化正常的JavaScript语义。严格模式可以嵌入到非严格模式中，关键字 ‘use strict’。使用严格模式后的代码应遵循JS严格的语法规则。例如，分号在每个语句声明之后使用。")]),a._v(" "),r("h2",{attrs:{id:"_8-解释-javascript-中的-null-和-undefined。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-解释-javascript-中的-null-和-undefined。"}},[a._v("#")]),a._v(" 8.解释 JavaScript 中的 null 和 undefined。")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("JavaScript 中有两种底层类型：null 和 undefined。它们代表了不同的含义：")])]),a._v(" "),r("li",[r("p",[a._v("尚未初始化：undefined；")])]),a._v(" "),r("li",[r("p",[a._v("空值：null。")]),a._v(" "),r("p",[a._v("//null和undefined是两个不同的对象\nnull == null  //true\nnull === null  //true\nnull == undefined //true\nnull === undefined //flase")])])]),a._v(" "),r("ol",{attrs:{start:"9"}},[r("li",[a._v("JavaScript 中的数据类型。")])]),a._v(" "),r("hr"),a._v(" "),r("p",[a._v("JavaScript提供两种数据类型: 基本数据类型和引用数据类型"),r("br"),a._v("\n基本数据类型有:")]),a._v(" "),r("ul",[r("li",[a._v("String")]),a._v(" "),r("li",[a._v("Number")]),a._v(" "),r("li",[a._v("Boolean")]),a._v(" "),r("li",[a._v("Null")]),a._v(" "),r("li",[a._v("Undefined")]),a._v(" "),r("li",[a._v("Symbol")])]),a._v(" "),r("p",[a._v("引用数据类型有:")]),a._v(" "),r("ul",[r("li",[a._v("Object")]),a._v(" "),r("li",[a._v("Array")]),a._v(" "),r("li",[a._v("Function")])]),a._v(" "),r("h2",{attrs:{id:"_10-解释事件冒泡以及如何阻止它？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-解释事件冒泡以及如何阻止它？"}},[a._v("#")]),a._v(" 10.解释事件冒泡以及如何阻止它？")]),a._v(" "),r("p",[a._v("事件冒泡是指嵌套最深的元素触发一个事件，然后这个事件顺着嵌套顺序在父元素上触发。")]),a._v(" "),r("p",[a._v("防止事件冒泡的一种方法是使用 event.stopPropagation()或 event.cancelBubble （低于 IE 9）。")]),a._v(" "),r("h2",{attrs:{id:"_11-window-onload的作用？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-window-onload的作用？"}},[a._v("#")]),a._v(" 11.window.onload的作用？")]),a._v(" "),r("p",[a._v("window.onload是等文档和资源都加载完成后调用的事件，保证js获取元素 的时候，已经加载。")]),a._v(" "),r("h2",{attrs:{id:"_12-说说你对作用域链的理解？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12-说说你对作用域链的理解？"}},[a._v("#")]),a._v(" 12.说说你对作用域链的理解？")]),a._v(" "),r("p",[a._v("作用域链是js中的一种查找机制，从当前作用域查找，当前作用域没有往上一级作用域查找，一直到最外层，如果都找不到则是is not define")]),a._v(" "),r("h2",{attrs:{id:"_13-定时器的分类？他们的区别及用法是什么？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13-定时器的分类？他们的区别及用法是什么？"}},[a._v("#")]),a._v(" 13.定时器的分类？他们的区别及用法是什么？")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("Js中有两种定时器：setInterval：间歇执行，setTimeout：延迟执行  \nsetInterval(函数，时间) 时间单位ms，  \n语法：setInterval(function(){},1000); 隔一秒执行函数一次  \n一般用于倒计时，轮播图  \nsetTimeout(函数，时间) 时间单位ms，  \n语法：setTimeout(function(){},1000); 延迟一秒执行函数一次，只会执行一次  \n一般用于广告，广告弹出层  \n")])])]),r("h2",{attrs:{id:"_14-把下面的字符串去重，并去除掉特殊字符按照数字在前字母在后的顺序排序字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14-把下面的字符串去重，并去除掉特殊字符按照数字在前字母在后的顺序排序字符串"}},[a._v("#")]),a._v(" 14.把下面的字符串去重，并去除掉特殊字符按照数字在前字母在后的顺序排序字符串")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("如下：'1233fddfd&3434fdsaff&454545&4545444rfdsfds&545gdsgs'\nvar str = '1233fddfd&3434fdsaff&454545&4545444rfdsfds&545gdsgs';\nvar n = '';\nvar s='';\nfor(var i=0; i<str.length; i++){\n    if((str[i]>=0&&str[i]<=9)&&n.indexOf(str[i])==-1){\n        n+=str[i];\n    }else if((str.charCodeAt(i)>=97&&str.charCodeAt(i)<=122)&&s.indexOf(str[i]) == -1){\n        s+=str[i];\n    }\n}\nconsole.log(n+s); //12345fdsarg\n")])])]),r("h2",{attrs:{id:"_15-截取字符串-abcdefg-中的def。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15-截取字符串-abcdefg-中的def。"}},[a._v("#")]),a._v(" 15.截取字符串'abcdefg'中的def。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("var str = 'abcdefg';\nif(str.indexOf('def')!==-1){\n    console.log(str.substr(str.indexOf('def'),3));\n}\n")])])]),r("h2",{attrs:{id:"_16-数组方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16-数组方法"}},[a._v("#")]),a._v(" 16.数组方法")]),a._v(" "),r("p",[a._v("修改器方法\n下面的这些方法会改变调用它们的对象自身的值：")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("Array.prototype.pop()\n删除数组的最后一个元素，并返回这个元素。\nArray.prototype.push()\n在数组的末尾增加一个或多个元素，并返回数组的新长度。\nArray.prototype.reverse()\n颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。\nArray.prototype.shift()\n删除数组的第一个元素，并返回这个元素。\nArray.prototype.sort()\n对数组元素进行排序，并返回当前数组。\nArray.prototype.splice()\n在任意的位置给数组添加或删除任意个元素。\nArray.prototype.unshift()\n在数组的开头增加一个或多个元素，并返回数组的新长度。\n")])])]),r("p",[a._v("访问方法\n下面的这些方法绝对不会改变调用它们的对象的值，只会返回一个新的数组或者返回一个其它的期望值。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("Array.prototype.concat()\n返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。\nArray.prototype.includes() \n判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。\nArray.prototype.join()\n连接所有数组元素组成一个字符串。\nArray.prototype.slice()\n抽取当前数组中的一段元素组合成一个新数组。\nArray.prototype.toString()\n返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。\nArray.prototype.toLocaleString()\n返回一个由所有数组元素组合而成的本地化后的字符串。遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。\nArray.prototype.indexOf()\n返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n")])])]),r("p",[a._v("迭代方法\n在下面的众多遍历方法中，有很多方法都需要指定一个回调函数作为参数。在每一个数组元素都分别执行完回调函数之前，数组的length属性会被缓存在某个地方，所以，如果你在回调函数中为当前数组添加了新的元素，那么那些新添加的元素是不会被遍历到的。此外，如果在回调函数中对当前数组进行了其它修改，比如改变某个元素的值或者删掉某个元素，那么随后的遍历操作可能会受到未预期的影响。总之，不要尝试在遍历过程中对原数组进行任何修改，虽然规范对这样的操作进行了详细的定义，但为了可读性和可维护性，请不要这样做。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("Array.prototype.forEach()\n为数组中的每个元素执行一次回调函数。\nArray.prototype.every()\n如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。\nArray.prototype.some()\n如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。\nArray.prototype.filter()\n将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。\nArray.prototype.find() \n找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。\nArray.prototype.map()\n返回一个由回调函数的返回值组成的新数组。\nArray.prototype.reduce()\n从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。\n")])])]),r("h2",{attrs:{id:"_17-split-join"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_17-split-join"}},[a._v("#")]),a._v(" 17.split() join()")]),a._v(" "),r("p",[a._v("split是字符串的方法，将字符串按照特定标志分割成数组"),r("br"),a._v("\n例：str.split('').reverse().join('')反转字符串")]),a._v(" "),r("h2",{attrs:{id:"_18-编写一个数组去重的方法。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_18-编写一个数组去重的方法。"}},[a._v("#")]),a._v(" 18.编写一个数组去重的方法。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("function sort(arr) {\n    for(var i = 0;i<arr.length;i++){\n        for(var j = i+1;j<arr.length;j++){\n            if(arr[i] == arr[j]){\n                arr.splice(j,1);\n                j--; //删除一个元素后，后面的元素会依次往前，下标也需要依次往前\n            }\n        }\n    }\n    return arr\n}\n")])])]),r("h2",{attrs:{id:"_19-冒泡算法排序？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_19-冒泡算法排序？"}},[a._v("#")]),a._v(" 19.冒泡算法排序？")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("for(var i = 0;i<arr.length;i++){\n    for(var j = 0;j<arr.length-i;j++){\n        if(arr[j] > arr[j+1]){ //\n            var temp = arr[j];\n            arr[j] = arr[j+1];\n            arr[j+1] = temp;\n        }\n    }\n}\n")])])]),r("h2",{attrs:{id:"_20-dom怎样添加、移除、移动、复制、创建和查找节点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_20-dom怎样添加、移除、移动、复制、创建和查找节点"}},[a._v("#")]),a._v(" 20.DOM怎样添加、移除、移动、复制、创建和查找节点")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("获取子节点\n父节点.children\n父节点.childNodes\n获取父节点\n子节点.parentNode\n子节点.offsetParent\n创建\ndocument.createElement(‘标签名’)\ndocument.createTextNode(‘文本内容’)\n添加\n父节点.appendChild(子节点)\n父节点.insertBefore(newChild，refChild)\n复制\n被复制的节点.cloneNode(true)\n删除：\n节点.remove()\n父节点.removeChild（子节点）\n替换\n父节点.replaceChild（newChild，refChild）\n")])])]),r("h2",{attrs:{id:"_21-什么是window对象-什么是document对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_21-什么是window对象-什么是document对象"}},[a._v("#")]),a._v(" 21.什么是window对象? 什么是document对象?")]),a._v(" "),r("p",[a._v("window是js中最大的对象，表示窗口，包含document"),r("br"),a._v("\ndocument文档对象，表示HTML")]),a._v(" "),r("h2",{attrs:{id:"_22-offsetwidth、clientwidth、scrolltop的区别？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_22-offsetwidth、clientwidth、scrolltop的区别？"}},[a._v("#")]),a._v(" 22.offsetWidth、clientWidth、scrollTop的区别？")]),a._v(" "),r("p",[a._v("offsetWidth：占位宽，包含 内容宽+左右padding+左右border"),r("br"),a._v("\nclientWidth：可视宽，包含 内容宽+左右padding"),r("br"),a._v("\nscrollTop：页面被卷去的高")]),a._v(" "),r("h2",{attrs:{id:"_23-如何获取url地址中搜索内容？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_23-如何获取url地址中搜索内容？"}},[a._v("#")]),a._v(" 23.如何获取url地址中搜索内容？")]),a._v(" "),r("p",[a._v("window.location.search")]),a._v(" "),r("h2",{attrs:{id:"_24-事件、ie与火狐的事件机制有什么区别？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_24-事件、ie与火狐的事件机制有什么区别？"}},[a._v("#")]),a._v(" 24.事件、IE与火狐的事件机制有什么区别？")]),a._v(" "),r("p",[a._v("IE的事件流是冒泡流，而火狐同时支持冒泡流和捕获流。")]),a._v(" "),r("h2",{attrs:{id:"_25-事件绑定和普通事件有什么区别。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_25-事件绑定和普通事件有什么区别。"}},[a._v("#")]),a._v(" 25.事件绑定和普通事件有什么区别。")]),a._v(" "),r("p",[a._v("标签.事件：如果给同一个元素添加同一个事件，后面的会覆盖前面"),r("br"),a._v("\n事件绑定：可以给同一个元素添加同一个事件，不会被覆盖")]),a._v(" "),r("h2",{attrs:{id:"_26-解释一下事件流？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_26-解释一下事件流？"}},[a._v("#")]),a._v(" 26.解释一下事件流？")]),a._v(" "),r("p",[a._v("事件捕获阶段：当事件发生的时候，将事件从window依次往子元素传递"),r("br"),a._v("\n确定目标阶段：确定事件目标"),r("br"),a._v("\n事件冒泡阶段：事件目标开始处理事件，处理完以后会将事件依次传递给父元素，一直到window"),r("br"),a._v("\n事件都是在事件冒泡处理,ie只有冒泡")]),a._v(" "),r("h2",{attrs:{id:"_27-拖拽效果中有几种事件？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_27-拖拽效果中有几种事件？"}},[a._v("#")]),a._v(" 27.拖拽效果中有几种事件？")]),a._v(" "),r("p",[a._v("按下onmousedown，拖拽onmousemove，弹起onmouseup")]),a._v(" "),r("h2",{attrs:{id:"_28-cookie的利弊？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_28-cookie的利弊？"}},[a._v("#")]),a._v(" 28.cookie的利弊？")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("优点：极高的扩展性和可用性\n1.通过良好的编程，控制保存在cookie中的session对象的大小。\n2.通过加密和安全传输技术（SSL），减少cookie被破的可能性。\n3.只在cookie中存放不敏感数据，即使被盗也不会有重大损失。\n4.控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie。\n缺点：\n1.Cookie数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。\n2.安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。\n3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。\n因为这些弊端（主要是cookie的大小和多少都受限制，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用），IE8以后，就出现一个web storage；它仅仅是为了本地缓存数据而存在；但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在。\n")])])]),r("h2",{attrs:{id:"_29-call-和apply-的区别和作用？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_29-call-和apply-的区别和作用？"}},[a._v("#")]),a._v(" 29.call()和apply()的区别和作用？")]),a._v(" "),r("p",[a._v("都是用来改变this的指向，在传值的过程中会有些区别"),r("br"),a._v("\ncall（this的指向，参数1，参数2…）"),r("br"),a._v("\napply（this的指向,[参数1，参数2…]）")]),a._v(" "),r("h2",{attrs:{id:"_30-创建ajax的过程。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_30-创建ajax的过程。"}},[a._v("#")]),a._v(" 30.创建ajax的过程。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("function ajax(json) {\n    json.data = json.data||''; //如果没有请求参数，为空\n    json.contentType = json.contentType || 'application/x-www-form-urlencoded'; //如果没有字符编码，用默认的\n        //1.创建对象\n    if (window.XMLHttpRequest) { //正常\n        var ajax = new XMLHttpRequest();\n    } else { //兼容ie6\n    var ajax = new ActiveXObject('Microsoft.XMLHTTP');\n}\n\n​ //2.建立连接\n​ if (json.type.toUpperCase() =='get'.toUpperCase()) {\n​   ajax.open('GET',json.url+\"?\"+json.data,true);\n​ //3.发送请求\n​   ajax.send();\n​ } else {\n​   ajax.open('POST',json.url,true);\n​ //3.设置请求头 ajax.setRequestHeader('Content-type',json.contentType+\";charset=utf-8\");\n​ //4.发送请求\n​   ajax.send(json.data);\n​ }\n​ //4.监听结果\n​ ajax.onreadystatechange = function () {\n​   if(ajax.readyState == 4 && ajax.status == 200){\n")])])]),r("p",[a._v("​           json.success(ajax.response);\n​   }\n​ }\n}")]),a._v(" "),r("h2",{attrs:{id:"_31-ajax请求的时候get-和post方式的区别，什么时候用post。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_31-ajax请求的时候get-和post方式的区别，什么时候用post。"}},[a._v("#")]),a._v(" 31.ajax请求的时候get 和post方式的区别，什么时候用post。")]),a._v(" "),r("p",[a._v("1、GET请求会将参数跟在URL后进行传递，而POST请求则是作为HTTP消息的实体内容发送给WEB服务器。当然在Ajax请求中，这种区别对用户是不可见的"),r("br"),a._v("\n2、GEt传输数据容量小，不安全，post传输数据内容大，更加安全;")]),a._v(" "),r("h2",{attrs:{id:"_32-ajax请求时，如何解释json数据。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_32-ajax请求时，如何解释json数据。"}},[a._v("#")]),a._v(" 32.ajax请求时，如何解释json数据。")]),a._v(" "),r("p",[a._v('如果是字符串形式的json：eval("("+ajax.response+")")'),r("br"),a._v("\n如果是本地的json文件：JSON.parse(data)")]),a._v(" "),r("h2",{attrs:{id:"_33-同步和异步的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_33-同步和异步的区别"}},[a._v("#")]),a._v(" 33.同步和异步的区别?")]),a._v(" "),r("p",[a._v("同步")]),a._v(" "),r("p",[a._v("所有的操作都做完，才返回给用户。这样用户在线等待的时间太长，给用户一种卡死了的感觉（就是系统迁移中，点击了迁移，界面就不动了，但是程序还在执行，卡死了的感觉）。这种情况下，用户不能关闭界面，如果关闭了，即迁移程序就中断了。")]),a._v(" "),r("p",[a._v("异步\n将用户请求放入消息队列，并反馈给用户，系统迁移程序已经启动，你可以关闭浏览器了。然后程序再慢慢地去写入数据库去。这就是异步。但是用户没有卡死的感觉，会告诉你，你的请求系统已经响应了。你可以关闭界面了。")]),a._v(" "),r("p",[a._v("同步，是所有的操作都做完，才返回给用户结果。即写完数据库之后，再响应用户。\n异步，不用等所有操作都做完，就相应用户请求。即先响应用户请求，然后慢慢去写数据库。")]),a._v(" "),r("h2",{attrs:{id:"_34-js哪些操作会造成内存泄露？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_34-js哪些操作会造成内存泄露？"}},[a._v("#")]),a._v(" 34.js哪些操作会造成内存泄露？")]),a._v(" "),r("p",[a._v("1）意外的全局变量引起的内存泄露"),r("br"),a._v("\nfunction leak() { leak='xxx';//leak成为一个全局变量，不会被回收 }"),r("br"),a._v("\n2）被遗忘的定时器或者回调"),r("br"),a._v("\n3）闭包引起的内存泄漏")]),a._v(" "),r("h2",{attrs:{id:"_35-document-ready-方法和window-onload-有什么区别？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_35-document-ready-方法和window-onload-有什么区别？"}},[a._v("#")]),a._v(" 35.$(document).ready() 方法和window.onload 有什么区别？")]),a._v(" "),r("p",[a._v("window.onload与ready的区别"),r("br"),a._v("\n1.window.onload会覆盖之前的"),r("br"),a._v("\nready的区别，不会覆盖，会叠加"),r("br"),a._v("\n2.window.onload等文档和资源都加载完成以后调用"),r("br"),a._v("\nready只要文档加载完成以后就会调用")]),a._v(" "),r("h2",{attrs:{id:"_36-怎么解决跨域问题？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_36-怎么解决跨域问题？"}},[a._v("#")]),a._v(" 36.怎么解决跨域问题？")]),a._v(" "),r("p",[a._v("通过jsonp解决跨域，即通过script标签的src属性引入一个js文件，通过回调函数将数据返回"),r("br"),a._v("\nKaTeX parse error: Expected 'EOF', got '&' at position 34: …script src=’url&̲callback=showDa….ajax()方法中，只需配置一个dataType:‘jsonp’，就可以发起一个跨域请求")])])}),[],!1,null,null,null);t.default=n.exports}}]);